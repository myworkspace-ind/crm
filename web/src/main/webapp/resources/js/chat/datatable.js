/*var dataSetCustomerCare */

function notifyPotentialCustomers() {
	fetch(`${_ctx}customer-care/load-customer-care/`)
		.then(response => response.json())
		.then(data => {
			console.log("Danh s√°ch kh√°ch h√†ng c·∫ßn nh·∫Øc nh·ªü:", data);

			// Ki·ªÉm tra n·∫øu d·ªØ li·ªáu tr·∫£ v·ªÅ c√≥ ƒë√∫ng ƒë·ªãnh d·∫°ng object hay kh√¥ng
			if (!data || typeof data !== "object") {
				console.error("D·ªØ li·ªáu tr·∫£ v·ªÅ kh√¥ng h·ª£p l·ªá:", data);
				return;
			}

			// L·∫•y danh s√°ch kh√°ch h√†ng c√≥ ho·∫∑c kh√¥ng c√≥ d·ªØ li·ªáu
			const customersWithData = Array.isArray(data.customersWithData) ? data.customersWithData : [];
			const customersWithoutData = Array.isArray(data.customersWithoutData) ? data.customersWithoutData : [];

			// G·ªôp hai danh s√°ch l·∫°i ƒë·ªÉ x·ª≠ l√Ω chung
			const allCustomers = [...customersWithData, ...customersWithoutData];

			if (allCustomers.length === 0) {
				console.warn("Kh√¥ng c√≥ kh√°ch h√†ng n√†o c·∫ßn nh·∫Øc nh·ªü.");
				return;
			}

			allCustomers.forEach(customerData => {
				if (!Array.isArray(customerData) || customerData.length < 5) {
					console.warn("D·ªØ li·ªáu kh√°ch h√†ng kh√¥ng h·ª£p l·ªá:", customerData);
					return;
				}

				const customer = {
					id: customerData[0] || "unknown",
					companyName: customerData[2] || "Kh√¥ng r√µ",
					contactName: customerData[3] || "Kh√¥ng c√≥",
					status: customerData[4] || "Kh√¥ng x√°c ƒë·ªãnh"
				};

				showMessageNotification(customer);
			});
		})
		.catch(error => console.error('L·ªói khi l·∫•y danh s√°ch kh√°ch h√†ng', error));
}

function showMessageNotification(customer) {
	const reminderList = document.getElementById("customer-reminder");
	if (!reminderList) return;

	if (document.querySelector(`#customer-reminder li[data-id='${customer.id}']`)) {
		return;
	}

	let reminderItem = document.createElement("li");
	reminderItem.classList.add("mb-3");
	reminderItem.setAttribute("data-id", customer.id);

	let now = new Date();
	let currentDate = now.toISOString().split("T")[0]; // L·∫•y ng√†y hi·ªán t·∫°i (YYYY-MM-DD)

	let createdAt = customer.createdAt ? new Date(customer.createdAt) : now;
	let createdDate = createdAt.toISOString().split("T")[0]; // L·∫•y ng√†y t·∫°o (YYYY-MM-DD)

	let displayDate;
	if (currentDate === createdDate) {
		displayDate = "H√¥m nay";
	} else {
		displayDate = createdAt.toLocaleDateString("vi-VN", {
			day: "2-digit",
			month: "2-digit",
			year: "numeric"
		});
	}

	let currentTime = now.toLocaleTimeString("vi-VN", { hour: "2-digit", minute: "2-digit" });

	reminderItem.innerHTML = `
        <div class="bg-light p-2 rounded">
            <p class="mb-1 text-dark">
                Nh·∫Øc nh·ªü: Kh√°ch h√†ng 
                <a href="#" onclick="highlightCustomer('${customer.id}')" class="fw-bold">${customer.companyName}</a> 
                c·∫ßn chƒÉm s√≥c ngay!
            </p>
            <small class="text-muted">${displayDate}, ${currentTime}</small>
        </div>`;

	reminderList.appendChild(reminderItem);
}


function highlightCustomer(customerId) {
	const modalContainer = document.getElementById('modal-container');
	const modalOverlay = document.getElementById('modal-overlay');

	if (!modalContainer || !modalOverlay) return;

	// M·ªü modal n·∫øu n√≥ ƒëang b·ªã ·∫©n
	if (modalContainer.style.display === "none" || modalContainer.style.display === "") {
		modalContainer.style.display = "block";
		modalOverlay.style.display = "block";
	}

	const table = document.getElementById("tblDatatableCustomerCare");
	if (!table) return;

	// T√¨m t·∫•t c·∫£ c√°c h√†ng trong tbody
	const rows = table.querySelectorAll("tbody tr");

	let targetRow = null;

	// Duy·ªát t·ª´ng d√≤ng ƒë·ªÉ t√¨m ID trong c·ªôt ƒë·∫ßu ti√™n
	rows.forEach(row => {
		const firstCell = row.querySelector("td"); // C·ªôt ƒë·∫ßu ti√™n ch·ª©a ID
		if (firstCell && firstCell.textContent.trim() === customerId.toString()) {
			targetRow = row;
		}
	});

	if (targetRow) {
		// ƒê·ª£i b·∫£ng hi·ªÉn th·ªã xong r·ªìi m·ªõi cu·ªôn v√† vi·ªÅn
		setTimeout(() => {
			targetRow.scrollIntoView({ behavior: "smooth", block: "center" });
			targetRow.style.transition = "border 0.5s ease-in-out";
			targetRow.style.border = "2px solid red";

			setTimeout(() => { targetRow.style.border = "none"; }, 5000);
		}, 300); // ƒê·ª£i 300ms ƒë·ªÉ modal m·ªü ho√†n to√†n
	} else {
		console.log(`Kh√¥ng t√¨m th·∫•y d√≤ng kh√°ch h√†ng v·ªõi ID: ${customerId}`);
	}
}



function checkUncaredCustomers() {
	let hasUncared = false;

	// Ki·ªÉm tra xem c√≥ d√≤ng n√†o trong tbody kh√¥ng
	let rows = $('#tblDatatableCustomerCare tbody tr');
	console.log(`üîç T·ªïng s·ªë h√†ng trong b·∫£ng: ${rows.length}`);

	if (rows.length === 0) {
		console.log("‚ö† B·∫£ng ch∆∞a c√≥ d·ªØ li·ªáu!");
	}

	rows.each(function(index) {
		let status = $(this).find('td:nth-child(8)').text().trim();
		console.log(`üìå H√†ng ${index + 1}: T√¨nh tr·∫°ng - '${status}'`);

		if (status === "Ch∆∞a chƒÉm s√≥c") {
			hasUncared = true;
			console.log("‚ùó Ph√°t hi·ªán kh√°ch h√†ng ch∆∞a chƒÉm s√≥c, d·ª´ng ki·ªÉm tra.");
			return false;
		}
	});

	let chatButton = $("#chat-button");
	let chatMessages = $("#chat-messages");

	if (hasUncared) {
		console.log("‚úÖ C√≥ kh√°ch h√†ng ch∆∞a chƒÉm s√≥c => B·∫≠t c·∫£nh b√°o chat.");
		chatButton.addClass("chat-alert");

		//Th√™m tin nh·∫Øn th√¥ng b√°o b√°o n·∫øu ch∆∞a c√≥
		if ($("#chat-messages .alert-message").length === 0) {
			chatMessages.append('<div class="alert-message">‚ö† H√£y chƒÉm s√≥c kh√°ch h√†ng c·ªßa b·∫°n!</div>');
		}
	} else {
		console.log("‚úÖ T·∫•t c·∫£ kh√°ch h√†ng ƒë√£ ƒë∆∞·ª£c chƒÉm s√≥c => T·∫Øt c·∫£nh b√°o chat.");
		chatButton.removeClass("chat-alert");

		//X√≥a tin nh·∫Øn th√¥ng b√°o
		$("#chat-messages .alert-message").remove();
	}
}


$(document).ready(function() {

	console.log("jQuery version:", $.fn.jquery);
	console.log("DataTables version:", $.fn.dataTable);

	$('#reloadCustomerCare').on('click', function() {
		//setTimeout(checkUncaredCustomers, 1000);

		$(this).prop('disabled', true).html('<i class="fa fa-spinner fa-spin"></i> ƒêang t·∫£i...');

		$.ajax({
			url: _ctx + 'customer-care/load-potential',
			method: 'GET',
			dataType: "text",
			success: function(response) {
				console.log("API load-potential th√†nh c√¥ng:", response);

				if (response.includes("th√†nh c√¥ng")) {
					Swal.fire({
						title: "‚úÖ Th√†nh c√¥ng!",
						text: response,
						icon: "success",
						confirmButtonText: "OK"
					}).then(() => {
						loadCustomerCareData();
						location.reload();
					});
				} else {
					Swal.fire({
						title: "‚ö† L·ªói!",
						text: response,
						icon: "error",
						confirmButtonText: "Th·ª≠ l·∫°i"
					}).then(() => {
						loadCustomerCareData();
						location.reload();
					});
				}

			},
			error: function(xhr, error) {
				console.error("L·ªói khi g·ªçi API load-potential:", error);
				console.log("Chi ti·∫øt l·ªói:", xhr);
				alert("L·ªói khi t·∫£i l·∫°i danh s√°ch: " + xhr.responseText);
			},
			complete: function() {
				$('#reloadCustomerCare').prop('disabled', false).html('<i class="fa fa-sync"></i> T·∫£i l·∫°i danh s√°ch');
			}
		});
	})

	$('#tblDatatableCustomerCare tbody').on('click', '.btn-save', function() {
		let updateList = [];

		let $row = $(this).closest('tr'); // L·∫•y h√†ng ch·ª©a n√∫t ƒë∆∞·ª£c nh·∫•n
		let customerCareId = $row.find('td:first').text().trim();
		let priority = $row.find('.radio-badge-group input:checked').val();

		if (!customerCareId) {
			alert("Kh√¥ng t√¨m th·∫•y ID kh√°ch h√†ng.");
			return;
		}

		if (!priority) {
			alert("Vui l√≤ng ch·ªçn m·ª©c ƒë·ªô ∆∞u ti√™n tr∆∞·ªõc khi l∆∞u.");
			return;
		}

		$.ajax({
			url: _ctx + 'customer-care/check-exist/' + customerCareId, // API ki·ªÉm tra
			method: "GET",
			success: function(response) {
				if (!response.exists) {
					Swal.fire({
						title: "‚ö† Kh√°ch h√†ng ch∆∞a c√≥ trong h·ªá th·ªëng!",
						html: `Vui l√≤ng nh·∫•n n√∫t L∆ØU DANH S√ÅCH ƒë·ªÉ c·∫≠p nh·∫≠t danh s√°ch kh√°ch h√†ng c·∫ßn chƒÉm s√≥c.`,
						icon: "warning",
						confirmButtonText: "OK",
						confirmButtonColor: "#d33",
						customClass: {
							title: "custom-title",
							popup: "custom-popup"
						}
					});
					return;
				}

				updateList.push({ id: parseInt(customerCareId), priority });
				console.log("üîÑ D·ªØ li·ªáu g·ª≠i ƒëi:", updateList);

				$.ajax({
					url: _ctx + 'customer-care/update-priority',
					method: "PUT",
					headers: { "Content-Type": "application/json" },
					data: JSON.stringify(updateList),
					success: function(response) {
						alert("C·∫≠p nh·∫≠t th√†nh c√¥ng!");
						console.log("‚úÖ API Response:", response);
					},
					error: function(xhr, error) {
						console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t priority:", error);
						alert("L·ªói khi c·∫≠p nh·∫≠t d·ªØ li·ªáu: " + xhr.responseText);
					}
				});

			},
			error: function(xhr, error) {
				console.error("‚ùå L·ªói khi ki·ªÉm tra kh√°ch h√†ng:", error);
				alert("L·ªói khi ki·ªÉm tra th√¥ng tin kh√°ch h√†ng.");
			}
		});
	});


	$('#tblDatatableCustomerCare tbody').on('click', '.care-button', function() {
		alert("ƒê√£ click v√†o n√∫t ChƒÉm s√≥c");
		//		let rowData = $('#tblDatatableCustomerCare').DataTable().row($(this).parents('tr')).data();
		//		console.log("D·ªØ li·ªáu h√†ng:", rowData);
		//
		//		// G·∫Øn d·ªØ li·ªáu v√†o modal (n·∫øu c·∫ßn)
		//		$('#careModal .modal-body').html(`<p>ƒêang chƒÉm s√≥c kh√°ch h√†ng: <strong>${rowData[2]}</strong></p>`);
		//
		//		// Hi·ªÉn th·ªã modal
		//		$('#careModal').modal('show');
	});


	if (!$.fn.DataTable.isDataTable('#tblDatatableCustomerCare')) {
		loadCustomerCareData();
	}

	function loadCustomerCareData() {
		console.log("B·∫Øt ƒë·∫ßu g·ª≠i request AJAX...");
		$.ajax({
			url: _ctx + 'customer-care/load-customer-care/',
			method: "GET",
			dataType: "json",
			success: function(data) {
				console.log("D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c:", data);

				if (!data || typeof data !== "object") {
					console.error("D·ªØ li·ªáu tr·∫£ v·ªÅ kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng:", data);
					return;
				}

				//L·∫•y danh s√°ch KH c·∫ßn chƒÉm s√≥c (c√≥ ho·∫∑c ko c√≥ d·ªØ li·ªáu)
				const customersWithData = Array.isArray(data.customersWithData) ? data.customersWithData : [];
				const customersWithoutData = Array.isArray(data.customersWithoutData) ? data.customersWithoutData : [];

				// G·ªôp t·∫•t c·∫£ kh√°ch h√†ng l·∫°i
				const allCustomers = [...customersWithData, ...customersWithoutData];

				if (allCustomers.length === 0) {
					console.warn("Kh√¥ng c√≥ kh√°ch h√†ng n√†o ƒë·ªÉ hi·ªÉn th·ªã.");
					return;
				}

				console.log("D·ªØ li·ªáu allCustomers:", allCustomers);

				// Ki·ªÉm tra n·∫øu DataTable ƒë√£ t·ªìn t·∫°i th√¨ x√≥a n√≥ tr∆∞·ªõc
				if ($.fn.DataTable.isDataTable('#tblDatatableCustomerCare')) {
					var table = $('#tblDatatableCustomerCare').DataTable();
					table.clear(); // X√≥a d·ªØ li·ªáu hi·ªán t·∫°i
					table.rows.add(allCustomers); // Th√™m d·ªØ li·ªáu m·ªõi
					table.draw(); // V·∫Ω l·∫°i b·∫£ng	
				} else {
					// Kh·ªüi t·∫°o l·∫°i DataTable
					let table = $('#tblDatatableCustomerCare').DataTable({
						data: allCustomers,
						dom: 'Bfrtip',
						paging: true, // Ph√¢n trang
						searching: true, // T√¨m ki·∫øm
						ordering: true, // S·∫Øp x·∫øp
						lengthMenu: [5, 10, 25],
						buttons: [
							{
								extend: 'copyHtml5',
								text: '<i class="fa fa-copy"></i> Sao ch√©p',
								className: 'btn-copy'
							},
							{
								extend: 'excelHtml5',
								text: '<i class="fa fa-file-excel"></i> Xu·∫•t Excel',
								className: 'btn-excel'
							},
							{
								extend: 'csvHtml5',
								text: '<i class="fa fa-file-csv"></i> Xu·∫•t CSV',
								className: 'btn-csv'
							},
							{
								extend: 'pdfHtml5',
								text: '<i class="fa fa-file-pdf"></i> Xu·∫•t PDF',
								className: 'btn-pdf'
							}
						],
						initComplete: function() {
							console.log("‚úÖ DataTable ƒë√£ kh·ªüi t·∫°o xong, ki·ªÉm tra d·ªØ li·ªáu...");
							checkUncaredCustomers();
							notifyPotentialCustomers();
						},
						columnDefs: [
							{
								targets: 0,
								visible: true
							},
							{
								targets: 1,
								data: null,
								defaultContent: `
														        <div class="btn-group-customer-care" role="group">
														            <button class="btn btn-primary btn-save"><i class="bi bi-save"></i></button>
														            <button class="btn btn-danger btn-sm"><i class="bi bi-eye-slash"></i></button>
														        </div>`
							},
							{
								targets: 2,
								className: 'company-name-column'
							},
							{
								targets: 5,
								data: null,
								defaultContent: `
																<div class="interaction-btn-customer-care" style="cursor: pointer;">
																	<button>Xem t∆∞∆°ng t√°c</button>
																</div>`
							},
							{
								targets: 6,
								data: null,
								render: function(data, type, row, meta) {
									let priority = row[6];

									if (priority) {
										switch (priority) {
											case "R·∫•t quan tr·ªçng":
												return `<span class="badge badge-danger">${priority}</span>`;
											case "Quan tr·ªçng":
												return `<span class="badge badge-warning">${priority}</span>`;
											case "Trung b√¨nh":
												return `<span class="badge badge-primary">${priority}</span>`;
											default:
												return `<span class="badge badge-default">${priority || "Ch∆∞a c√≥ d·ªØ li·ªáu"}</span>`;
										}
									}

									setTimeout(() => {
										updateBadgeStyle($(`.radio-badge-group[data-row="${meta.row}"]`), data, meta.row)
									}, 0);

									return `
															        <div class="radio-badge-group"> 
															            <input type="radio" id="option1-row${meta.row}" name="priority-row${meta.row}" value="R·∫•t quan tr·ªçng" hidden>
															            <label for="option1-row${meta.row}" class="badge badge-default">R·∫•t quan tr·ªçng</label>
															                                        
															            <input type="radio" id="option2-row${meta.row}" name="priority-row${meta.row}" value="Quan tr·ªçng" hidden>
															            <label for="option2-row${meta.row}" class="badge badge-default">Quan tr·ªçng</label>
															                                        
															            <input type="radio" id="option3-row${meta.row}" name="priority-row${meta.row}" value="Trung b√¨nh" hidden>
															            <label for="option3-row${meta.row}" class="badge badge-default">Trung b√¨nh</label>
															        </div>`;
								}
							},
							{
							    targets: 7,
							    render: function(data, type, row, meta) {
							        if (!data || data.trim() === "") {
							            data = "Ch∆∞a chƒÉm s√≥c";
							        }

							        let alerts = [];

							        // Chia data th√†nh c√°c tr·∫°ng th√°i n·∫øu c√≥ nhi·ªÅu tr·∫°ng th√°i (gi·∫£ s·ª≠ c√°c tr·∫°ng th√°i ph√¢n t√°ch nhau b·∫±ng d·∫•u ph·∫©y)
							        let statuses = data.split(",").map(status => status.trim());

							        // Ki·ªÉm tra t·ª´ng tr·∫°ng th√°i v√† th√™m alert v√†o m·∫£ng
							        statuses.forEach(status => {
							            if (status === "ƒê√£ chƒÉm s√≥c") {
							                alerts.push(
							                    `<div class="alert alert-success" role="alert">
							                        <strong>ƒê√£ chƒÉm s√≥c</strong>
							                    </div>`
							                );
							            } else if (status === "Ch∆∞a chƒÉm s√≥c") {
							                alerts.push(
							                    `<div class="alert alert-primary" role="alert">
							                        <strong>Ch∆∞a chƒÉm s√≥c</strong>
							                    </div>`
							                );
							            } else if (status === "ChƒÉm s√≥c ƒë√∫ng h·∫°n") {
							                alerts.push(
							                    `<div class="alert alert-info" role="alert">
							                        <strong>ChƒÉm s√≥c ƒë√∫ng h·∫°n</strong>
							                    </div>`
							                );
							            } else if (status === "Qu√° h·∫°n chƒÉm s√≥c") {
							                alerts.push(
							                    `<div class="alert alert-danger" role="alert">
							                        <strong>Qu√° h·∫°n chƒÉm s√≥c</strong>
							                    </div>`
							                );
							            }
							        });

							        // N·∫øu c√≥ √≠t nh·∫•t m·ªôt alert, tr·∫£ v·ªÅ t·∫•t c·∫£ c√°c alert k·∫øt h·ª£p
							        if (alerts.length > 0) {
							            return alerts.join(''); // Gh√©p c√°c alert l·∫°i th√†nh chu·ªói
							        }

							        // N·∫øu kh√¥ng c√≥ alert n√†o, tr·∫£ v·ªÅ gi√° tr·ªã data
							        return data;
							    }
							},

							{
								targets: 8,
								data: null,
								defaultContent: `
															<div class="action-care">
																<button class="care-button">
																	<span class="icon"></span>
																	<span class="text">ChƒÉm s√≥c</span>
																</button>
																
																<button class="meet-button">
																	<span class="icon"></span>
																	<span class="text">H·∫πn g·∫∑p m·∫∑t</span>
																</button>
															</div>`
							},
						],
						createdRow: function(row, data, dataIndex) {
							let priority = data[6];
							let $radioGroup = $(row).find('.radio-badge-group');
							let $selectedRadio = $radioGroup.find(`input[value="${priority}"]`);
							$selectedRadio.prop('checked', true);
							// G·ªçi h√†m c·∫≠p nh·∫≠t m√†u khi t·∫£i d·ªØ li·ªáu
							updateBadgeStyle($radioGroup, priority);
						}
					});
				}

				$('#tblDatatableCustomerCare tbody').on('change', 'input[type="radio"]', function() {
					let $radioGroup = $(this).closest('.radio-badge-group');
					updateBadgeStyle($radioGroup, $(this).val());
				});

				// H√†m c·∫≠p nh·∫≠t m√†u cho badge d·ª±a tr√™n gi√° tr·ªã
				function updateBadgeStyle($radioGroup, priority, rowIndex) {
					//					console.log(`üîÑ C·∫≠p nh·∫≠t m√†u cho h√†ng ${rowIndex}, m·ª©c ƒë·ªô: ${priority}`);

					$radioGroup.find('label').removeClass('badge-danger badge-warning badge-primary').addClass('badge-default');

					let $selectedRadio = $radioGroup.find(`input[value="${priority}"]`);

					if ($selectedRadio.length) {
						let labelFor = $selectedRadio.attr('id');
						let $label = $radioGroup.find(`label[for="${labelFor}"]`);

						switch (priority) {
							case "R·∫•t quan tr·ªçng":
								$label.addClass('badge-danger');
								break;
							case "Quan tr·ªçng":
								$label.addClass('badge-warning');
								break;
							case "Trung b√¨nh":
								$label.addClass('badge-primary');
								break;
						}
					}
				}
			},
			error: function(xhr, error) {
				console.error("L·ªói khi t·∫£i d·ªØ li·ªáu:", error);
				alert("L·ªói khi t·∫£i d·ªØ li·ªáu: " + xhr.responseText);
			}
		});
	}

})










